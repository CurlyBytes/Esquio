@page "/authentication/{action}"
@inject IAccessTokenProvider AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

@inject IPolicyBuilder policyBuilder
@inject EsquioState esquioState
@inject IEsquioHttpClient esquioHttpClient
@inject ILogger<Authentication> logger

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="IsUserAllowed" OnLogOutSucceeded="OnUserLogedout">
</RemoteAuthenticatorView>

@code{
    [Parameter] public string Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn, Action))
        {
            await EvaluateAuthorization(notAllowed: () =>
            {
                Navigation.NavigateTo("forbidden");
            });
        }
    }

    async Task IsUserAllowed(RemoteAuthenticationState authenticationState)
    {
        await EvaluateAuthorization(notAllowed: () =>
        {
            authenticationState.ReturnUrl = "forbidden";
        });
    }

    void OnUserLogedout(RemoteAuthenticationState authenticationState)
    {
        esquioState.ClearState();
    }

    async Task EvaluateAuthorization(Action notAllowed)
    {
        var my = await esquioHttpClient.GetMy();

        if (my != null)
        {
            logger.LogWarning($"The current user authorization is  Authorized:{my.IsAuthorized} with Role:{my.ActAs}");

            var authenticationState =  await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var loggedUser = new LoggedUserViewModel()
            {
                UserName = authenticationState.User.Identity.Name,
                SubjectId = authenticationState.User.FindFirst("sub").Value,
                ActAs = my?.ActAs
            };

            var policy = policyBuilder.Build(my);

            esquioState.ClearState();
            esquioState.SetLoggedUser(loggedUser);
            esquioState.SetPolicy(policy);
        }
        else
        {
            logger.LogWarning("User is not allowed to use Esquio App because subject is not configured.");

            notAllowed();
        }
    }
}